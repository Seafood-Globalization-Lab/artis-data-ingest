---
title: "ARTIS Data Ingest"
subtitle: "Changelog of raw data verions"
author: "Althea Marks"
format:
  pdf:
    papersize: letter
execute:
  echo: FALSE
  include: FALSE
  message: FALSE
  warning: FALSE
  
---

```{r}
#| label: setup


#### Library #####
library(data.table)
library(dplyr)
library(readr)
library(stringr)
library(purrr)
library(tidyr)

#### Directory setup #####

# Newest data
datadir_new <- file.path("~", "Documents", "UW-SAFS", "ARTIS", "data",
                         "model_inputs_raw_v2_0")
# last data ingest
datadir_old <- file.path("~", "Documents", "UW-SAFS", "ARTIS", "data",
                         "model_inputs_raw")

# values for report
raw_data_type <- "FAO Global Production"
artis_prev <- "v1.0"
artis_next <- "v2.0"
data_v_old <- "2022.1.1"
data_v_new <- "2024.1.0"
```

```{r}
#| label: get-files

# List all subdirectories in datadir_new
subdirs_new <- list.dirs(datadir_new, recursive = TRUE, full.names = TRUE)
subdirs_old <- list.dirs(datadir_old, recursive = TRUE, full.names = TRUE)

# FAO Global production regex pattern
pattern_fao <- regex("(global[\\s_-]*production)", ignore_case = TRUE)

# FAO Global production directory
fao_dir_new <- subdirs_new[str_detect(subdirs_new, pattern_fao)]
fao_dir_old <- subdirs_old[str_detect(subdirs_old, pattern_fao)]

# BACI regex pattern
# pattern_baci <- regex("(baci)", ignore_case = TRUE)
# 
# # BACI directory
# baci_dir_new <- subdirs_new[str_detect(subdirs_new, pattern_baci)]
#baci_dir_old <- subdirs_old[str_detect(subdirs_old, pattern_baci)]

```

```{r}
#| label: assess-file-changes

# 1. **Scan directories**
scan_dir <- function(dir, rg = "") {
  if (length(dir) == 0) return(character(0)) # Handle empty directories
  list.files(dir, pattern = rg, recursive = TRUE, full.names = TRUE)
}

# 2. **Read files from directories**
files_new <- scan_dir(fao_dir_new)
files_old <- scan_dir(fao_dir_old)

# 3. **Standardize file names**
all_files <- tibble(
  full_path = c(files_new, files_old),
  files = c(basename(files_new), basename(files_old)),
  directory = c(rep("new", length(files_new)), rep("old", length(files_old)))
) %>%
  mutate(
    files_std = files %>% 
      str_remove("^filtered_") %>%  # Remove "filtered_" prefix
      str_remove("_V\\d{6,7}[a-z]*") %>% # Remove version suffix (like _V202201)
      str_replace_all("\\.[a-zA-Z0-9]+$", "") %>%  # Remove extensions like .csv
      str_replace_all("[^a-zA-Z0-9]", "_") %>%   # Replace non-alphanumeric characters with underscores
      str_to_lower()  # Convert to lowercase
  )

# 4. **Pivot to match new and old files**
file_level_log <- all_files %>%
  pivot_wider(
    id_cols = files_std,             # Only use files_std to identify matching files
    names_from = directory, 
    values_from = full_path, 
    names_prefix = ""
  ) %>%
  mutate(
    exists_in_old = !is.na(old),
    exists_in_new = !is.na(new),
    size_old_mb = ifelse(!is.na(old), file.info(old)$size / 1e6, NA_real_),
    size_new_mb = ifelse(!is.na(new), file.info(new)$size / 1e6, NA_real_),
    size_change_mb = size_new_mb - size_old_mb
  )

# 5. **Data-Level Change Log**
comparison_pairs <- file_level_log %>%
  filter(exists_in_old & exists_in_new) %>%
  filter(str_detect(new, "\\.csv$") & str_detect(old, "\\.csv$")) %>%
  select(files_std, new, old)

compare_files <- function(file_new, file_old) {
  data_new <- fread(file_new)
  data_old <- fread(file_old)
  
  list(
    file_name_new = basename(file_new),
    file_name_old = basename(file_old),
    new_rows = nrow(data_new),
    old_rows = nrow(data_old),
    row_diff = nrow(data_new) - nrow(data_old),
    new_cols = colnames(data_new),
    old_cols = colnames(data_old),
    added_cols = setdiff(colnames(data_new), 
                         colnames(data_old)),
    removed_cols = setdiff(colnames(data_old), 
                           colnames(data_new)),
    data_type_changes = tibble(
      column = union(colnames(data_new), colnames(data_old)),
      # if col is in data_old get its class - else it is NA_character_
      old_type = map_chr(union(colnames(data_new), colnames(data_old)), 
                         ~ ifelse(.x %in% colnames(data_old), 
                                  class(data_old[[.x]])[1], 
                                  NA_character_)),
      # if col is in data_new get its class - else it is NA_character_
      new_type = map_chr(union(colnames(data_new), 
                               colnames(data_old)), 
                         ~ ifelse(.x %in% colnames(data_new), 
                                  class(data_new[[.x]])[1], 
                                  NA_character_))
    ) %>% 
      mutate(type_changed = old_type != new_type)
  )
}

data_level_log <- comparison_pairs %>%
  mutate(comparison = map2(new, old, ~ compare_files(.x, .y)))

# Extract data-level comparison details
data_change_log <- data_level_log %>%
  unnest_wider(comparison) %>%
  select(file_name_new, file_name_old, new_rows, old_rows, row_diff, 
         added_cols, removed_cols, data_type_changes)


```

# Summary

The purpose of this report is to examine and document changes 
between raw input data versions ingested into the ARTIS (Aquatic Resource Trade 
in Species) Model. These raw data will then be processed and standardized to the 
model inputs (data build) fed directly into the ARTIS model. 

*ARTIS model versions*

- ARTIS ``r artis_prev`` was the previous model run
- ARTIS ``r artis_next`` is upcoming model run

# FAO Global Production

*Raw input data versions*

- `r raw_data_type` ``r data_v_old`` is the previous data version
- `r raw_data_type` ``r data_v_new`` is the data version to be ingested in the upcoming ARTIS ``r artis_next`` model run


```{r}
#| label: logic-files-missing
#| results: 'asis'
#| include: TRUE

if (any(file_level_log$exists_in_old == FALSE)) {
  cat(paste0("The new ", data_v_new, " data version contains files that are not present in the old ", data_v_old, " version: ", basename(file_level_log[[which(file_level_log$exists_in_old == FALSE), "new"]])
                 )
          )
}
```

```{r}
#| label: logic-files-added
#| results: 'asis'
#| include: TRUE

if (any(file_level_log$exists_in_new == FALSE)) {
  cat(paste0("The old ", data_v_old, " data version contains files that are not present in the new ", data_v_new, " version: ", basename(file_level_log[[which(file_level_log$exists_in_new == FALSE), "old"]])
                 )
          )
}
```
